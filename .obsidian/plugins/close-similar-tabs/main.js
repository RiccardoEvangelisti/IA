/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DuplicateTabs
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DuplicateTabsSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Close Similar Tabs" });
    const linkText = containerEl.createEl("span", {
      text: " \u{1F334}"
    });
    const linkContainer = containerEl.createEl("p", {
      text: "Repository: \u{1F334} "
    });
    linkContainer.createEl("a", {
      text: "1C0D/Obsidian-Close-Similar-Tabs",
      href: "https://github.com/1C0D/Obsidian-Close-Similar-Tabs"
    });
    linkContainer.appendChild(linkText);
    new import_obsidian.Setting(containerEl).setName("Close by window").setDesc(
      "Select whether the plugin will only close similar tabs within the same window, or throughout all open windows."
    ).addDropdown((dropdown) => {
      dropdown.addOptions({
        current: "Current window only",
        all: "All windows"
      }).setValue(this.plugin.settings.byWindow).onChange(async (value) => {
        this.plugin.settings.byWindow = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("No empty tabs").setDesc("Activates no several empty tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.noEmptyTabs).onChange((value) => {
        this.plugin.settings.noEmptyTabs = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Toggle Close Similar Tabs").setDesc("Enable/disable Close Similar Tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.toggleCloseSimilarTabs).onChange((value) => {
        this.plugin.settings.toggleCloseSimilarTabs = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Be Notified").setDesc("open a notification pop up when a similar tab already exists").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.beNotified).onChange((value) => {
        this.plugin.settings.beNotified = value;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("p", {
      text: 'Check "Close Similar Tabs parameters" in Command palette to directly change these parameters, from the editor'
    });
  }
};

// src/modal.ts
var import_obsidian2 = require("obsidian");
var DuplicateTabsModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h4", { text: "Close Similar Tabs Parameters" });
    new import_obsidian2.Setting(contentEl).setName("Toggle Close Similar Tabs").setDesc("Enable/disable Close Similar Tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.toggleCloseSimilarTabs).onChange((value) => {
        this.plugin.settings.toggleCloseSimilarTabs = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Close by window").setDesc(
      "Select whether the plugin will only close similar tabs within the same window, or throughout all open windows."
    ).addDropdown((dropdown) => {
      dropdown.addOptions({
        current: "Current window only",
        all: "All windows"
      }).setValue(this.plugin.settings.byWindow).onChange(async (value) => {
        this.plugin.settings.byWindow = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(contentEl).setName("No empty tabs").setDesc("Activates no several empty tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.noEmptyTabs).onChange((value) => {
        this.plugin.settings.noEmptyTabs = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Be Notified").setDesc("open a notification pop up when a similar tab already exists").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.beNotified).onChange((value) => {
        this.plugin.settings.beNotified = value;
        this.plugin.saveSettings();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  byWindow: "current",
  noEmptyTabs: true,
  toggleCloseSimilarTabs: true,
  beNotified: true
};
var DuplicateTabs = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DuplicateTabsSettingsTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", () => {
          if (this.settings.toggleCloseSimilarTabs)
            this.findDuplicates();
        })
      );
    });
    this.addCommand({
      id: "close-similar-tabs-params",
      name: "Close similar tabs parameters",
      callback: () => {
        new DuplicateTabsModal(this.app, this).open();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // activeLeaf = last leaf created, removed when it's a duplicate
  findDuplicates() {
    const byWindow = this.settings.byWindow;
    const noEmptyTabs = this.settings.noEmptyTabs;
    const { workspace } = this.app;
    const activeLeaf = workspace.activeLeaf;
    const activeView = activeLeaf.view;
    const isMainWindowActive = (activeView == null ? void 0 : activeView.containerEl.win) == window;
    const rootSplitActive = activeLeaf.getRoot() == workspace.rootSplit;
    const activeLeafPath = activeLeaf == null ? void 0 : activeLeaf.getViewState().state.file;
    const activeTitlePart = activeLeafPath == null ? void 0 : activeLeafPath.split("/").pop().split(".")[0];
    const activetitle = activeView == null ? void 0 : activeView.getDisplayText();
    const activeEl = activeLeaf.parent.containerEl;
    if ((activeView == null ? void 0 : activeView.getDisplayText()) !== "New tab" && (!activeLeafPath || activeTitlePart !== activetitle))
      return;
    workspace.iterateAllLeaves((leaf) => {
      const leafEl = leaf.parent.containerEl;
      if (activeEl !== leafEl)
        return;
      const leafState = leaf.getViewState();
      const leafPath = leafState.state.file;
      const leafTitle = leaf.getDisplayText();
      const leafTitlePart = leafPath == null ? void 0 : leafPath.split("/").pop().split(".")[0];
      if ((activeView == null ? void 0 : activeView.getDisplayText()) !== "New tab" && (!leafPath || leafTitlePart !== leafTitle))
        return;
      const isMainWindowDupli = leaf.view.containerEl.win == window;
      const isSameWindowDupli = leaf.view.containerEl.win == activeWindow;
      const rootSplitDupli = leaf.getRoot() == workspace.rootSplit;
      const correctPane = isMainWindowDupli && rootSplitDupli || !isMainWindowDupli;
      if (leaf !== activeLeaf && leafPath && leafPath === activeLeafPath && (!isMainWindowActive || rootSplitActive) && correctPane) {
        if (byWindow === "all") {
          this.closeDuplicate(activeLeaf, workspace, leaf, leafPath);
        } else {
          const correctPane1 = isMainWindowDupli && isMainWindowActive || !isMainWindowActive && !isMainWindowDupli && isSameWindowDupli;
          if (correctPane1) {
            this.closeDuplicate(activeLeaf, workspace, leaf, leafPath);
          }
        }
      } else if (
        // empty tabs
        noEmptyTabs && leaf !== activeLeaf && leaf.view.getDisplayText() === "New tab" && (activeView == null ? void 0 : activeView.getDisplayText()) === "New tab" && (!isMainWindowActive || rootSplitActive) && correctPane
      ) {
        if (byWindow === "all") {
          leaf == null ? void 0 : leaf.detach();
          if (activeLeaf)
            workspace.revealLeaf(activeLeaf);
        } else {
          const correctPane1 = isMainWindowDupli && isMainWindowActive || !isMainWindowActive && !isMainWindowDupli && isSameWindowDupli;
          if (correctPane1) {
            leaf == null ? void 0 : leaf.detach();
            if (activeLeaf)
              workspace.revealLeaf(activeLeaf);
          }
        }
      }
    });
  }
  closeDuplicate(activeLeaf, workspace, leaf, leafPath) {
    activeLeaf == null ? void 0 : activeLeaf.detach();
    workspace.revealLeaf(leaf);
    if (this.settings.beNotified) {
      new import_obsidian3.Notice(`"${leafPath}" already opened`);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
